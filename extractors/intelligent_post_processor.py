"""
üß† Post-Processeur Intelligent
=============================

Int√®gre ExtractionImprover dans l'architecture modulaire V2
pour enrichir les extractions avec une intelligence contextuelle.
"""

import logging
from typing import Dict, Any, Optional, List
from pathlib import Path
import sys

# Ajouter le r√©pertoire parent au path pour importer extraction_improver
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from extraction_improver import extraction_improver
    EXTRACTION_IMPROVER_AVAILABLE = True
except ImportError:
    EXTRACTION_IMPROVER_AVAILABLE = False
    logging.warning("‚ö†Ô∏è ExtractionImprover non disponible - fonctionnalit√©s d'enrichissement d√©sactiv√©es")

logger = logging.getLogger(__name__)


class IntelligentPostProcessor:
    """
    Post-processeur intelligent utilisant ExtractionImprover
    
    Enrichit les donn√©es extraites avec une analyse contextuelle avanc√©e
    et une validation am√©lior√©e.
    """
    
    def __init__(self, enable_improver: bool = True):
        """
        Initialise le post-processeur
        
        Args:
            enable_improver: Activer l'am√©liorateur (d√©sactivable si non disponible)
        """
        self.enable_improver = enable_improver and EXTRACTION_IMPROVER_AVAILABLE
        
        if self.enable_improver:
            try:
                self.extraction_improver = extraction_improver
                logger.info("‚úÖ IntelligentPostProcessor initialis√© avec ExtractionImprover")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible d'initialiser ExtractionImprover: {e}")
                self.enable_improver = False
        else:
            self.extraction_improver = None
            logger.info("‚ÑπÔ∏è IntelligentPostProcessor initialis√© sans ExtractionImprover")
    
    def enhance_extraction(self, raw_data: Dict[str, Any], text: str, 
                          context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        Enrichit les donn√©es extraites avec une analyse intelligente
        
        Args:
            raw_data: Donn√©es extraites brutes
            text: Texte source complet
            context: Contexte suppl√©mentaire (optionnel)
            
        Returns:
            Donn√©es enrichies
        """
        if not self.enable_improver or not self.extraction_improver:
            logger.debug("Post-processeur d√©sactiv√©, retour des donn√©es brutes")
            return raw_data
        
        try:
            # Utiliser ExtractionImprover pour enrichir
            improved_data = self.extraction_improver.extract_improved_data(text)
            
            # Fusionner intelligemment avec les donn√©es brutes
            enhanced_data = self._merge_data(raw_data, improved_data)
            
            logger.debug(f"‚úÖ Donn√©es enrichies: {len(enhanced_data)} champs")
            return enhanced_data
            
        except Exception as e:
            logger.error(f"Erreur lors de l'enrichissement: {e}")
            # Retourner les donn√©es brutes en cas d'erreur
            return raw_data
    
    def _merge_data(self, raw_data: Dict[str, Any], 
                   improved_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Fusionne intelligemment les donn√©es brutes et am√©lior√©es
        
        Priorit√©: donn√©es am√©lior√©es si disponibles et valides, sinon donn√©es brutes
        
        Args:
            raw_data: Donn√©es extraites brutes
            improved_data: Donn√©es am√©lior√©es par ExtractionImprover
            
        Returns:
            Donn√©es fusionn√©es
        """
        merged = raw_data.copy()
        
        # Parcourir les donn√©es am√©lior√©es
        for key, improved_value in improved_data.items():
            # Ignorer les valeurs None, vides
            if improved_value is None or improved_value == '':
                continue
            
            # Si la cl√© n'existe pas dans raw_data OU si raw_data est vide, utiliser improved_value
            if key not in merged or not merged.get(key):
                merged[key] = improved_value
                logger.debug(f"‚úì Champ '{key}' enrichi depuis ExtractionImprover")
            # Si les deux existent, comparer pour voir lequel est meilleur
            elif self._is_better_value(improved_value, merged.get(key)):
                merged[key] = improved_value
                logger.debug(f"‚úì Champ '{key}' remplac√© par ExtractionImprover (valeur meilleure)")
        
        return merged
    
    def _is_better_value(self, improved_value: Any, raw_value: Any) -> bool:
        """
        D√©termine si la valeur am√©lior√©e est meilleure que la valeur brute
        
        Args:
            improved_value: Valeur am√©lior√©e
            raw_value: Valeur brute
            
        Returns:
            True si la valeur am√©lior√©e est meilleure
        """
        # Si raw_value est vide ou None, improved_value est meilleur
        if not raw_value or raw_value == '':
            return True
        
        # Pour les cha√Ænes, comparer la longueur (plus longue = souvent mieux)
        if isinstance(improved_value, str) and isinstance(raw_value, str):
            # Am√©lior√©e si plus longue (contient plus d'info)
            if len(improved_value) > len(raw_value) * 1.2:
                return True
            # Am√©lior√©e si raw_value contient des patterns invalides
            invalid_patterns = ['[...', '...', '[', ']', '(', ')']
            if any(pattern in raw_value for pattern in invalid_patterns):
                if not any(pattern in improved_value for pattern in invalid_patterns):
                    return True
        
        # Par d√©faut, garder la valeur brute
        return False
    
    def validate_enhanced_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valide les donn√©es enrichies
        
        Args:
            data: Donn√©es √† valider
            
        Returns:
            Donn√©es valid√©es avec indicateurs de qualit√©
        """
        validation_result = {
            'data': data,
            'quality_score': 0.0,
            'completeness': 0.0,
            'issues': []
        }
        
        # Calculer le score de compl√©tude
        total_fields = len(data)
        filled_fields = sum(1 for v in data.values() if v is not None and v != '')
        validation_result['completeness'] = (
            filled_fields / total_fields * 100 if total_fields > 0 else 0
        )
        
        # Calculer le score de qualit√© global
        validation_result['quality_score'] = validation_result['completeness']
        
        # D√©tecter les probl√®mes
        if validation_result['completeness'] < 50:
            validation_result['issues'].append("Compl√©tude faible (< 50%)")
        
        # V√©rifier les patterns invalides dans les cha√Ænes
        for key, value in data.items():
            if isinstance(value, str):
                invalid_patterns = ['[...', '...]', '[', ']']
                if any(pattern in value for pattern in invalid_patterns):
                    validation_result['issues'].append(f"Patterns invalides dans '{key}'")
        
        return validation_result
    
    def is_available(self) -> bool:
        """
        V√©rifie si le post-processeur est disponible
        
        Returns:
            True si disponible, False sinon
        """
        return self.enable_improver

