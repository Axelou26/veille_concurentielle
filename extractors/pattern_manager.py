"""
üéØ Gestionnaire de Patterns - Configuration Modulaire
====================================================

Gestion centralis√©e et modulaire des patterns regex pour l'extraction
d'informations depuis les documents d'appels d'offres.
"""

import re
import logging
from typing import Dict, List, Any, Optional, Tuple
from functools import lru_cache
import json
from pathlib import Path

logger = logging.getLogger(__name__)

class PatternManager:
    """Gestionnaire centralis√© des patterns d'extraction"""
    
    def __init__(self, config_file: Optional[str] = None):
        """
        Initialise le gestionnaire de patterns
        
        Args:
            config_file: Fichier de configuration JSON (optionnel)
        """
        self.patterns = self._initialize_patterns()
        self.compiled_patterns = {}
        self.performance_stats = {
            'total_compilations': 0,
            'cache_hits': 0,
            'compilation_errors': 0
        }
        
        if config_file:
            self.load_from_file(config_file)
    
    def _initialize_patterns(self) -> Dict[str, Dict[str, List[str]]]:
        """Initialise les patterns par d√©faut"""
        return {
            'montants': {
                'estime': [
                    # Patterns avec contexte complet
                    r'(?:montant|budget|prix|co√ªt|cout|valeur|estimation|enveloppe|allocation)[\s\w]*(?:global|total|estim√©|estime|pr√©visionnel|previsionnel)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?|HT|TTC|HTA|TVA)',
                    r'(?:budget|montant|prix|co√ªt|cout|estimation|enveloppe)[\s\w]*(?:global|total|estim√©|estime)[\s\w]*[:\s]*(\d{1,3}(?:\s?\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)',
                    r'(?:montant|budget|prix|co√ªt|cout|estimation)[\s\w]*[:\s]*(\d{1,3}(?:\s?\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)',
                    # Patterns avec unit√©s
                    r'(?:budget|montant|prix|co√ªt|cout|estimation)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)\s*(?:k‚Ç¨|keuros?|k\s*‚Ç¨|milliers)',
                    r'(\d+(?:[.,]\d+)?)\s*(?:k‚Ç¨|keuros?|k\s*‚Ç¨|milliers)',
                    r'(?:budget|montant|prix|co√ªt|cout|estimation)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)\s*(?:m‚Ç¨|meuros?|millions?|m\s*‚Ç¨)',
                    r'(\d+(?:[.,]\d+)?)\s*(?:m‚Ç¨|meuros?|millions?|m\s*‚Ç¨)',
                    # Patterns avec contexte de march√©
                    r'(?:march√©|marche|contrat|prestation)[\s\w]*(?:montant|budget|prix|co√ªt|cout|estimation)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)',
                    # Patterns avec contexte d'appel d'offres
                    r'(?:appel|offre|ao|consultation)[\s\w]*(?:montant|budget|prix|co√ªt|cout|estimation)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)'
                ],
                'maxi': [
                    # Patterns avec contexte de maximum/plafond
                    r'(?:maximum|maxi|plafond|limite|seuil|seuil)[\s\w]*(?:budgetaire|budgetaire|global|total|montant)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?|HT|TTC)',
                    r'(?:budget|montant|prix|co√ªt|cout)[\s\w]*(?:maximum|maxi|plafond|limite|seuil)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)',
                    r'(?:enveloppe|allocation|dotation)[\s\w]*(?:maximum|maxi|plafond|limite)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)',
                    # Patterns avec unit√©s
                    r'(?:montant|budget|prix|co√ªt|cout)[\s\w]*(?:maximum|maxi|plafond|limite|seuil)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)\s*(?:k‚Ç¨|keuros?|k\s*‚Ç¨)',
                    r'(?:montant|budget|prix|co√ªt|cout)[\s\w]*(?:maximum|maxi|plafond|limite|seuil)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)\s*(?:m‚Ç¨|meuros?|millions?|m\s*‚Ç¨)',
                    # Patterns avec contexte de march√©
                    r'(?:march√©|marche|contrat)[\s\w]*(?:maximum|maxi|plafond|limite)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)',
                    # Patterns avec contexte d'appel d'offres
                    r'(?:appel|offre|ao|consultation)[\s\w]*(?:maximum|maxi|plafond|limite)[\s\w]*[:\s]*(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?)'
                ]
            },
            'dates': {
                'limite': [
                    # Patterns avec contexte complet
                    r'(?:date|√©ch√©ance|cl√¥ture|cloture|fin|expiration)[\s\w]*(?:limite|remise|offres|candidature|soumission|d√©p√¥t|depot)[\s\w]*[:\s]*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'(?:date|√©ch√©ance|cl√¥ture|cloture|fin|expiration)[\s\w]*(?:limite|remise|offres|candidature|soumission|d√©p√¥t|depot)[\s\w]*[:\s]*(\d{4}-\d{2}-\d{2})',
                    r'(?:date|√©ch√©ance|cl√¥ture|cloture|fin|expiration)[\s\w]*(?:limite|remise|offres|candidature|soumission|d√©p√¥t|depot)[\s\w]*[:\s]*(\d{1,2}\s+(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+\d{4})',
                    # Patterns avec variations de format
                    r'(?:date|√©ch√©ance|cl√¥ture|cloture|fin|expiration)[\s\w]*(?:limite|remise|offres|candidature|soumission|d√©p√¥t|depot)[\s\w]*[:\s]*(\d{1,2}\s+(?:janv|f√©vr|mars|avr|mai|juin|juil|ao√ªt|sept|oct|nov|d√©c)\.?\s+\d{4})',
                    # Patterns avec contexte d'appel d'offres
                    r'(?:appel|offre|ao|consultation|march√©|marche)[\s\w]*(?:date|√©ch√©ance|cl√¥ture|cloture|fin)[\s\w]*(?:limite|remise|offres|candidature|soumission|d√©p√¥t|depot)[\s\w]*[:\s]*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    # Patterns g√©n√©riques
                    r'(?:date|√©ch√©ance|cl√¥ture|cloture|fin|expiration)[\s\w]*[:\s]*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'(?:date|√©ch√©ance|cl√¥ture|cloture|fin|expiration)[\s\w]*[:\s]*(\d{4}-\d{2}-\d{2})',
                    # Patterns avec format fran√ßais
                    r'(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'(\d{4}-\d{2}-\d{2})'
                ],
                'attribution': [
                    # Patterns avec contexte complet
                    r'(?:date|attribution|attribu√©|attribue|attribution)[\s\w]*(?:march√©|marche|contrat|prestation|lot)[\s\w]*[:\s]*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'(?:date|attribution|attribu√©|attribue|attribution)[\s\w]*(?:march√©|marche|contrat|prestation|lot)[\s\w]*[:\s]*(\d{4}-\d{2}-\d{2})',
                    r'(?:attribution|attribu√©|attribue|attribution)[\s\w]*[:\s]*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'(?:attribution|attribu√©|attribue|attribution)[\s\w]*[:\s]*(\d{4}-\d{2}-\d{2})',
                    # Patterns avec contexte d'appel d'offres
                    r'(?:appel|offre|ao|consultation)[\s\w]*(?:attribution|attribu√©|attribue|attribution)[\s\w]*[:\s]*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'(?:appel|offre|ao|consultation)[\s\w]*(?:attribution|attribu√©|attribue|attribution)[\s\w]*[:\s]*(\d{4}-\d{2}-\d{2})'
                ]
            },
            'references': {
                'procedure': [
                    # Patterns sp√©cifiques aux formats RESAH/UGAP
                    r'(?:ref|r√©f|r√©f√©rence|code|identifiant|identifiant|num√©ro|numero|no)[\s\w]*[:\s]*(\d{4}-[A-Z]\d{3})',
                    r'(?:ao|march√©|marche|contrat|prestation)[\s\w]*(?:ref|r√©f|r√©f√©rence|code|identifiant|identifiant|num√©ro|numero|no)[\s\w]*[:\s]*(\d{4}-[A-Z]\d{3})',
                    r'(\d{4}-[A-Z]\d{3})',  # Format direct 2024-R001
                    r'(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})',  # Format complet 2024-R001-000-000
                    # Patterns g√©n√©riques
                    r'(?:ref|r√©f|r√©f√©rence|code|identifiant|identifiant|num√©ro|numero|no)[\s\w]*(?:proc√©dure|procedure|ao|march√©|marche|contrat|prestation)[\s\w]*[:\s]*([A-Z0-9\-_]+)',
                    r'([A-Z]{2,}\d{4,})',  # Pattern pour codes comme AO2024001
                    r'([A-Z]{2,}-\d{4,})',  # Pattern pour codes comme AO-2024-001
                    r'([A-Z]{2,}_\d{4,})',  # Pattern pour codes comme AO_2024_001
                    r'([A-Z]{2,}\.\d{4,})',  # Pattern pour codes comme AO.2024.001
                    r'([A-Z]{2,}\s\d{4,})'   # Pattern pour codes comme AO 2024 001
                ],
                'intitule': [
                    # Patterns avec contexte complet
                    r'(?:intitul√©|intitule|titre|objet|libell√©|libelle|d√©nomination|denomination|nom)[\s\w]*(?:proc√©dure|procedure|march√©|marche|ao|contrat|prestation)[\s\w]*[:\s]*([^,\n]{10,200})',
                    r'(?:intitul√©|intitule|titre|objet|libell√©|libelle|d√©nomination|denomination|nom)[\s\w]*[:\s]*([^,\n]{10,200})',
                    r'(?:appel|offre|march√©|marche|contrat|prestation)[\s\w]*[:\s]*([^,\n]{10,200})',
                    # Patterns avec contexte d'appel d'offres
                    r'(?:appel|offre|ao|consultation)[\s\w]*(?:intitul√©|intitule|titre|objet|libell√©|libelle|d√©nomination|denomination|nom)[\s\w]*[:\s]*([^,\n]{10,200})',
                    # Patterns avec contexte de march√©
                    r'(?:march√©|marche|contrat|prestation)[\s\w]*(?:intitul√©|intitule|titre|objet|libell√©|libelle|d√©nomination|denomination|nom)[\s\w]*[:\s]*([^,\n]{10,200})'
                ]
            },
            'procedures': {
                'type_procedure': [
                    # Patterns sp√©cifiques avec contexte
                    r'(?:type|mode|forme)[\s\w]*(?:proc√©dure|procedure|march√©|marche|ao)[\s\w]*[:\s]*([^,\n]{5,100})',
                    r'(?:proc√©dure|procedure)[\s\w]*(?:type|mode|forme)[\s\w]*[:\s]*([^,\n]{5,100})',
                    # Patterns directs pour les types courants
                    r'(appel\s+d[\'"]offres?\s+ouvert)',
                    r'(appel\s+d[\'"]offres?\s+restreint)',
                    r'(consultation)',
                    r'(march√©\s+de\s+services)',
                    r'(achat\s+direct)',
                    r'(commande)',
                    r'(convention)',
                    r'(accord\s+cadre)',
                    # Patterns avec contexte complet
                    r'(?:proc√©dure|procedure)[\s\w]*[:\s]*([^,\n]{5,100})',
                    r'(?:appel|offre|ao|consultation)[\s\w]*[:\s]*([^,\n]{5,100})'
                ],
                'mono_multi': [
                    # Patterns sp√©cifiques avec contexte
                    r'(?:allotissement|lotissement)[\s\w]*[:\s]*(oui|non|unique|multiple|mono|multi)',
                    r'(?:attribution)[\s\w]*(?:mono|multi|unique|multiple)[\s\w]*[:\s]*([^,\n]{1,50})',
                    # Patterns directs
                    r'(mono[\s-]?attributif)',
                    r'(multi[\s-]?attributif)',
                    r'(march√©\s+unique)',
                    r'(march√©\s+alloti)',
                    r'(lotissement|allotissement)',
                    # Patterns avec contexte complet
                    r'(?:march√©|marche|proc√©dure|procedure)[\s\w]*(?:unique|multiple|mono|multi|alloti|loti)[\s\w]*',
                    r'(?:unique|multiple|mono|multi)[\s\w]*(?:march√©|marche|proc√©dure|procedure)',
                    # Patterns de d√©tection intelligente (si plusieurs lots)
                    r'(?:nombre|nbr|nb)[\s\w]*(?:lots?)[\s\w]*[:\s]*(\d+)'
                ]
            },
            'groupements': {
                'groupement': [
                    # Patterns sp√©cifiques aux groupements connus
                    r'(?:groupement|consortium|alliance|partenariat|r√©seau|reseau|organisme|acheteur|client|ma√Ætre|donneur)[\s\w]*[:\s]*(RESAH|UGAP|CNRS|UNIHA|CAIH)',
                    r'(RESAH|UGAP|CNRS|UNIHA|CAIH)',  # Direct match
                    r'(?:groupement|consortium|alliance|partenariat|r√©seau|reseau|organisme|acheteur|client|ma√Ætre|donneur)[\s\w]*[:\s]*([A-Z]{2,})',
                    # Patterns g√©n√©riques
                    r'(?:groupement|consortium|alliance|partenariat|r√©seau|reseau)[\s\w]*[:\s]*([^,\n]{5,100})',
                    r'(?:minist√®re|mairie|r√©gion|d√©partement|√©tablissement|collectivit√©|entreprise|universit√©|h√¥pital|cnrs|ugap|resah|uniha)',
                    r'(?:organisme|acheteur|client|ma√Ætre|donneur)[\s\w]*[:\s]*([^,\n]{5,100})'
                ]
            },
            'lots': {
                'nbr_lots': [
                    # Patterns avec contexte complet
                    r'(?:nombre|nbr|nb)[\s\w]*(?:lots|lot)[\s\w]*[:\s]*(\d+)',
                    r'(?:lots|lot)[\s\w]*[:\s]*(\d+)',
                    r'(\d+)[\s\w]*(?:lots|lot)',
                    # Patterns avec contexte de march√©
                    r'(?:march√©|marche|contrat|prestation)[\s\w]*(?:nombre|nbr|nb)[\s\w]*(?:lots|lot)[\s\w]*[:\s]*(\d+)',
                    # Patterns avec contexte d'appel d'offres
                    r'(?:appel|offre|ao|consultation)[\s\w]*(?:nombre|nbr|nb)[\s\w]*(?:lots|lot)[\s\w]*[:\s]*(\d+)',
                    # Patterns sp√©cifiques aux tableaux de lots
                    r'Allotissement[^\n]*(\d+)[\s\w]*(?:lots|lot)',
                    r'LOTISSEMENT[^\n]*(\d+)[\s\w]*(?:lots|lot)',
                    r'REPARTITION[^\n]*(\d+)[\s\w]*(?:lots|lot)'
                ],
                'lot_numero': [
                    # Patterns avec contexte de lot
                    r'(?:lot|lot)[\s\w]*(?:n¬∞|numero|num√©ro|no)[\s\w]*[:\s]*(\d+)',
                    r'(?:lot|lot)[\s\w]*[:\s]*(\d+)',
                    r'lot[\s\w]*(\d+)',
                    # Patterns avec contexte de march√©
                    r'(?:march√©|marche|contrat|prestation)[\s\w]*(?:lot|lot)[\s\w]*(?:n¬∞|numero|num√©ro|no)[\s\w]*[:\s]*(\d+)',
                    # Patterns g√©n√©riques
                    r'(\d+)[\s\w]*(?:lot|lot)'
                ],
                'intitule_lot': [
                    # Patterns avec contexte de lot
                    r'(?:intitul√©|intitule|titre|objet|libell√©|libelle)[\s\w]*(?:lot|lot)[\s\w]*[:\s]*([^,\n]{5,200})',
                    r'(?:lot|lot)[\s\w]*[:\s]*([^,\n]{5,200})',
                    # Patterns sp√©cifiques aux formations
                    r'(?:r√©alisation|realisation)[\s\w]*(?:prestations|prestation)[\s\w]*(?:formations|formation)[\s\w]*(?:transverses|transverse|sant√©|sante|soins)[\s\w]*[:\s]*([^,\n]{5,200})',
                    # Patterns g√©n√©riques
                    r'(?:intitul√©|intitule|titre|objet|libell√©|libelle)[\s\w]*[:\s]*([^,\n]{5,200})',
                    # Patterns sp√©cifiques aux tableaux de lots
                    r'(?:^|\n)\d+\s+([A-Z][A-Z\s/]+?)\s+\d{1,3}(?:\s\d{3})*\s+\d{1,3}(?:\s\d{3})*\s*(?:\n|$)',
                    r'(?:^|\n)\d+\s+([A-Z][A-Z\s/\n]+?)\s+\d{1,3}(?:\s\d{3})*\s+\d{1,3}(?:\s\d{3})*\s*(?:\n|$)'
                ]
            },
            'criteres': {
                'economique': [
                    # Patterns sp√©cifiques aux tableaux de crit√®res
                    r'(?:lot\s*\d+[^\n]*)?(?:√©conomique|prix|co√ªt|cout)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(?:crit√®res?\s+d[\'"]attribution[^\n]*)?(?:√©conomique|prix|co√ªt|cout)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    # Patterns pour les points (35 points = 35%)
                    r'(?:lot\s*\d+[^\n]*)?(?:√©conomique|prix|co√ªt|cout)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*points?)',
                    r'(?:crit√®res?\s+d[\'"]attribution[^\n]*)?(?:√©conomique|prix|co√ªt|cout)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*points?)',
                    # Patterns sp√©cifiques aux pourcentages
                    r'(?:crit√®res|crit√®res|crit√®res)[\s\w]*(?:√©conomique|economique|prix|co√ªt|cout|attribution)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(?:prix|co√ªt|cout|√©conomique|economique)[\s\w]*(?:crit√®res|crit√®res)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(\d+(?:[.,]\d+)?\s*%)',  # Format direct 40%
                    # Patterns g√©n√©riques
                    r'(?:crit√®res|crit√®res|crit√®res)[\s\w]*(?:√©conomique|economique|prix|co√ªt|cout|attribution)[\s\w]*[:\s]*([^,\n]{5,200})',
                    r'(?:prix|co√ªt|cout|√©conomique|economique)[\s\w]*(?:crit√®res|crit√®res)[\s\w]*[:\s]*([^,\n]{5,200})'
                ],
                'techniques': [
                    # Patterns sp√©cifiques aux tableaux de crit√®res
                    r'(?:lot\s*\d+[^\n]*)?(?:technique|qualit√©|qualite)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(?:crit√®res?\s+d[\'"]attribution[^\n]*)?(?:technique|qualit√©|qualite)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    # Patterns pour les points (35 points = 35%)
                    r'(?:lot\s*\d+[^\n]*)?(?:technique|qualit√©|qualite)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*points?)',
                    r'(?:crit√®res?\s+d[\'"]attribution[^\n]*)?(?:technique|qualit√©|qualite)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*points?)',
                    # Patterns sp√©cifiques aux pourcentages
                    r'(?:crit√®res|crit√®res|crit√®res)[\s\w]*(?:techniques|technique|attribution)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(?:techniques|technique)[\s\w]*(?:crit√®res|crit√®res)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(\d+(?:[.,]\d+)?\s*%)',  # Format direct 35%
                    # Patterns g√©n√©riques
                    r'(?:crit√®res|crit√®res|crit√®res)[\s\w]*(?:techniques|technique|attribution)[\s\w]*[:\s]*([^,\n]{5,200})',
                    r'(?:techniques|technique)[\s\w]*(?:crit√®res|crit√®res)[\s\w]*[:\s]*([^,\n]{5,200})'
                ],
                'autres': [
                    # Patterns sp√©cifiques aux tableaux de crit√®res
                    r'(?:lot\s*\d+[^\n]*)?(?:autre|autres|innovation|rse|environnement)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(?:crit√®res?\s+d[\'"]attribution[^\n]*)?(?:autre|autres|innovation|rse|environnement)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    # Patterns pour les points (35 points = 35%)
                    r'(?:lot\s*\d+[^\n]*)?(?:autre|autres|innovation|rse|environnement)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*points?)',
                    r'(?:crit√®res?\s+d[\'"]attribution[^\n]*)?(?:autre|autres|innovation|rse|environnement)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*points?)',
                    # Patterns sp√©cifiques aux pourcentages
                    r'(?:autres|autres)[\s\w]*(?:crit√®res|crit√®res|attribution)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(?:crit√®res|crit√®res)[\s\w]*(?:autres|autres)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?\s*%)',
                    r'(\d+(?:[.,]\d+)?\s*%)',  # Format direct 15%
                    # Patterns g√©n√©riques
                    r'(?:autres|autres)[\s\w]*(?:crit√®res|crit√®res|attribution)[\s\w]*[:\s]*([^,\n]{5,200})',
                    r'(?:crit√®res|crit√®res)[\s\w]*(?:autres|autres)[\s\w]*[:\s]*([^,\n]{5,200})'
                ]
            },
            'quantites': {
                'minimum': [
                    # Patterns avec contexte
                    r'(?:quantit√©|quantite|qte)[\s\w]*(?:minimum|min)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)',
                    r'(?:minimum|min)[\s\w]*(?:quantit√©|quantite|qte)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)',
                    # Patterns g√©n√©riques
                    r'(\d+(?:[.,]\d+)?)[\s\w]*(?:minimum|min)',
                    r'(\d+(?:[.,]\d+)?)[\s\w]*(?:quantit√©|quantite|qte)[\s\w]*(?:minimum|min)'
                ],
                'estimees': [
                    # Patterns avec contexte
                    r'(?:quantit√©s|quantites|qte)[\s\w]*(?:estim√©es|estimees)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)',
                    r'(?:estim√©es|estimees)[\s\w]*(?:quantit√©s|quantites|qte)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)',
                    # Patterns sp√©cifiques aux formations
                    r'(?:quantit√©s|quantites|qte)[\s\w]*(?:estim√©es|estimees)[\s\w]*[:\s]*(\d+(?:\s*x\s*\d+)?)',
                    r'(\d+(?:\s*x\s*\d+)?)',  # Format 3 x 12
                    # Patterns g√©n√©riques
                    r'(?:quantit√©s|quantites|qte)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)',
                    r'(\d+(?:[.,]\d+)?)[\s\w]*(?:quantit√©s|quantites|qte)'
                ],
                'maximum': [
                    # Patterns avec contexte
                    r'(?:quantit√©|quantite|qte)[\s\w]*(?:maximum|max)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)',
                    r'(?:maximum|max)[\s\w]*(?:quantit√©|quantite|qte)[\s\w]*[:\s]*(\d+(?:[.,]\d+)?)',
                    # Patterns g√©n√©riques
                    r'(\d+(?:[.,]\d+)?)[\s\w]*(?:maximum|max)',
                    r'(\d+(?:[.,]\d+)?)[\s\w]*(?:quantit√©|quantite|qte)[\s\w]*(?:maximum|max)'
                ]
            },
            'durees': {
                'duree_marche': [
                    r'(?:dur√©e|duree)[\s\w]{0,40}?(?:march√©|marche)?[\s\w]{0,20}?(\d{1,3})\s*(?:mois|ans|an)',
                    r'(\d{1,3})\s*(?:mois|ans|an)[\s\w]{0,20}?(?:dur√©e|duree)'
                ],
                'execution_marche': [
                    r'(?:modalit√©s?|modalites?|conditions?)\s+d[\'\"]?ex[√©e]cution[\s\w:,-]{0,10}(.+)',
                    r'ex[√©e]cution\s+du\s+march[√©|e]\s*[:\-]?\s*(.+)'
                ],
                'reconduction': [
                    r'(?:reconduction|reconductible|renouvellement)[\s\w:,-]{0,20}(oui|non)',
                    r'(?:reconduction|reconductible|renouvellement)[\s\w:,-]{0,50}?(\d{1,2})\s*(?:fois|ans|an)'
                ],
                'fin_sans_reconduction': [
                    r'fin\s+sans\s+reconduction[\s\w:,-]{0,10}(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'fin\s+sans\s+reconduction[\s\w:,-]{0,10}(\d{4}-\d{2}-\d{2})'
                ],
                'fin_avec_reconduction': [
                    r'fin\s+avec\s+reconduction[\s\w:,-]{0,10}(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
                    r'fin\s+avec\s+reconduction[\s\w:,-]{0,10}(\d{4}-\d{2}-\d{2})'
                ]
            },
            'rse': {
                'rse': [
                    r'(?:rse|responsabilit[√©e]\s+soci[√©e]tale|d[√©e]veloppement\s+durable)[\s\w:,-]{0,10}(.+)',
                    r'crit[√®|e]res?\s+rse[\s\w:,-]{0,10}(.+)'
                ]
            },
            'contribution': {
                'fournisseur': [
                    r'(?:contribution\s+fournisseur|participation\s+fournisseur)[\s\w:,-]{0,10}(.+)'
                ]
            },
            'metadonnees': {
                'infos_complementaires': [
                    r'(?:informations?|renseignements?)\s+compl[√©e]mentaires?[\s\w:,-]{0,10}(.+)',
                    r'(?:infos?)\s+compl[√©e]mentaires?[\s\w:,-]{0,10}(.+)'
                ],
                'remarques': [
                    r'(?:remarques?|commentaires?|observations?)\s*[:\-]\s*([^\n]{10,500})',
                    r'(?:remarque|commentaire|observation)\s+([^\n]{10,500})',
                    r'(?:note|remarque)\s*(?:g√©n√©rale|generale|finale)\s*[:\-]\s*([^\n]{10,500})'
                ],
                'notes_acheteur_procedure': [
                    r'(?:note|avis|commentaire)\s+(?:de\s+)?l[\'"]?acheteur[\s\w]*(?:sur\s+)?(?:la\s+)?(?:proc[√©e]dure|procedure)[\s\w]*[:\-]\s*([^\n]{10,500})',
                    r'(?:note|avis)\s+(?:acheteur)[\s\w]*(?:proc[√©e]dure|procedure)[\s\w]*[:\-]\s*([^\n]{10,500})'
                ],
                'notes_acheteur_fournisseur': [
                    r'(?:note|avis|commentaire)\s+(?:de\s+)?l[\'"]?acheteur[\s\w]*(?:sur\s+)?(?:le\s+)?(?:fournisseur|prestataire)[\s\w]*[:\-]\s*([^\n]{10,500})',
                    r'(?:note|avis)\s+(?:acheteur)[\s\w]*(?:fournisseur|prestataire)[\s\w]*[:\-]\s*([^\n]{10,500})'
                ],
                'notes_acheteur_positionnement': [
                    r'(?:note|avis|commentaire)\s+(?:de\s+)?l[\'"]?acheteur[\s\w]*(?:sur\s+)?(?:le\s+)?(?:positionnement)[\s\w]*[:\-]\s*([^\n]{10,500})',
                    r'(?:note|avis)\s+(?:acheteur)[\s\w]*(?:positionnement)[\s\w]*[:\-]\s*([^\n]{10,500})'
                ]
            },
            'acquisition': {
                'achat': [
                    r'\bachat\b[\s\w:,-]{0,10}(oui|non)',
                    r'\bacquisition\b[\s\w:,-]{0,10}(oui|non)'
                ],
                'credit_bail': [
                    r'cr[√©|e]dit[-\s]?bail[\s\w:,-]{0,10}(oui|non)'
                ],
                'credit_bail_duree': [
                    r'cr[√©|e]dit[-\s]?bail[\s\w:,-]{0,30}?(\d{1,3})\s*(?:mois|ans|an)'
                ],
                'location': [
                    r'\blocation\b[\s\w:,-]{0,10}(oui|non)'
                ],
                'location_duree': [
                    r'\blocation\b[\s\w:,-]{0,30}?(\d{1,3})\s*(?:mois|ans|an)'
                ],
                'mad': [
                    r'\bmad\b[\s\w:,-]{0,10}(oui|non)',
                    r'mise\s+[√†a]\s+disposition[\s\w:,-]{0,10}(oui|non)'
                ]
            },
            'attribution': {
                'attributaire': [
                    r'(?:attributaire|titulaire|adjudicataire)[\s:\-]*([^\n]{3,200})'
                ],
                'produit_retenu': [
                    r'(?:produit\s+retenu|solution\s+retenue)[\s:\-]*([^\n]{3,200})'
                ]
            },
            'classification': {
                'segment': [
                    r'(?:segment)\s*[:\-]\s*([^\n]{3,120})',
                    r'(?:segment)\s+([^\n]{3,120})'
                ],
                'famille': [
                    r'(?:famille)\s*[:\-]\s*([^\n]{3,120})',
                    r'(?:famille)\s+([^\n]{3,120})'
                ]
            }
        }
    
    @lru_cache(maxsize=256)
    def get_patterns(self, category: str, subcategory: str = None) -> List[str]:
        """
        R√©cup√®re les patterns pour une cat√©gorie et sous-cat√©gorie
        
        Args:
            category: Cat√©gorie de patterns (montants, dates, etc.)
            subcategory: Sous-cat√©gorie (estime, limite, etc.)
            
        Returns:
            Liste des patterns
        """
        try:
            if subcategory:
                return self.patterns.get(category, {}).get(subcategory, [])
            else:
                # Retourner tous les patterns de la cat√©gorie
                all_patterns = []
                for subcat_patterns in self.patterns.get(category, {}).values():
                    all_patterns.extend(subcat_patterns)
                return all_patterns
        except Exception as e:
            logger.error(f"Erreur r√©cup√©ration patterns {category}.{subcategory}: {e}")
            return []
    
    def get_field_patterns(self, field_name: str) -> List[str]:
        """
        R√©cup√®re les patterns pour un champ sp√©cifique
        
        Args:
            field_name: Nom du champ (montant_global_estime, date_limite, etc.)
            
        Returns:
            Liste des patterns
        """
        # Mapping des champs vers les cat√©gories
        field_mapping = {
            'montant_global_estime': ('montants', 'estime'),
            'montant_global_maxi': ('montants', 'maxi'),
            'date_limite': ('dates', 'limite'),
            'date_attribution': ('dates', 'attribution'),
            'reference_procedure': ('references', 'procedure'),
            'intitule_procedure': ('references', 'intitule'),
            'type_procedure': ('procedures', 'type_procedure'),
            'mono_multi': ('procedures', 'mono_multi'),
            'groupement': ('groupements', 'groupement'),
            'nbr_lots': ('lots', 'nbr_lots'),
            'lot_numero': ('lots', 'lot_numero'),
            'intitule_lot': ('lots', 'intitule_lot'),
            'criteres_economique': ('criteres', 'economique'),
            'criteres_techniques': ('criteres', 'techniques'),
            'autres_criteres': ('criteres', 'autres'),
            'quantite_minimum': ('quantites', 'minimum'),
            'quantites_estimees': ('quantites', 'estimees'),
            'quantite_maximum': ('quantites', 'maximum'),
            'duree_marche': ('durees', 'duree_marche'),
            'execution_marche': ('durees', 'execution_marche'),
            'reconduction': ('durees', 'reconduction'),
            'fin_sans_reconduction': ('durees', 'fin_sans_reconduction'),
            'fin_avec_reconduction': ('durees', 'fin_avec_reconduction'),
            'rse': ('rse', 'rse'),
            'contribution_fournisseur': ('contribution', 'fournisseur'),
            'infos_complementaires': ('metadonnees', 'infos_complementaires'),
            'remarques': ('metadonnees', 'remarques'),
            'notes_acheteur_procedure': ('metadonnees', 'notes_acheteur_procedure'),
            'notes_acheteur_fournisseur': ('metadonnees', 'notes_acheteur_fournisseur'),
            'notes_acheteur_positionnement': ('metadonnees', 'notes_acheteur_positionnement'),
            'achat': ('acquisition', 'achat'),
            'credit_bail': ('acquisition', 'credit_bail'),
            'credit_bail_duree': ('acquisition', 'credit_bail_duree'),
            'location': ('acquisition', 'location'),
            'location_duree': ('acquisition', 'location_duree'),
            'mad': ('acquisition', 'mad'),
            'attributaire': ('attribution', 'attributaire'),
            'produit_retenu': ('attribution', 'produit_retenu'),
            'segment': ('classification', 'segment'),
            'famille': ('classification', 'famille')
        }
        
        if field_name in field_mapping:
            category, subcategory = field_mapping[field_name]
            return self.get_patterns(category, subcategory)
        else:
            logger.warning(f"Champ non reconnu: {field_name}")
            return []
    
    def compile_pattern(self, pattern: str) -> re.Pattern:
        """
        Compile un pattern avec mise en cache
        
        Args:
            pattern: Pattern regex √† compiler
            
        Returns:
            Pattern compil√©
        """
        if pattern in self.compiled_patterns:
            self.performance_stats['cache_hits'] += 1
            return self.compiled_patterns[pattern]
        
        try:
            compiled = re.compile(pattern, re.IGNORECASE | re.MULTILINE | re.DOTALL)
            self.compiled_patterns[pattern] = compiled
            self.performance_stats['total_compilations'] += 1
            return compiled
        except re.error as e:
            self.performance_stats['compilation_errors'] += 1
            logger.error(f"Erreur compilation pattern '{pattern}': {e}")
            return re.compile(r'.*')  # Pattern par d√©faut
    
    def extract_with_patterns(self, text: str, field_name: str) -> List[str]:
        """
        Extrait des valeurs avec les patterns d'un champ
        
        Args:
            text: Texte √† analyser
            field_name: Nom du champ
            
        Returns:
            Liste des valeurs extraites
        """
        patterns = self.get_field_patterns(field_name)
        extracted_values = []
        
        for pattern in patterns:
            try:
                compiled_pattern = self.compile_pattern(pattern)
                matches = compiled_pattern.findall(text)
                
                if matches:
                    for match in matches:
                        if isinstance(match, tuple):
                            # Si c'est un tuple, prendre le premier √©l√©ment non vide
                            value = next((m for m in match if m and str(m).strip()), '')
                        else:
                            value = match
                        
                        if value and str(value).strip():
                            extracted_values.append(str(value).strip())
                            
            except Exception as e:
                logger.warning(f"Erreur pattern '{pattern}' pour {field_name}: {e}")
                continue
        
        return extracted_values
    
    def add_pattern(self, category: str, subcategory: str, pattern: str):
        """
        Ajoute un nouveau pattern
        
        Args:
            category: Cat√©gorie du pattern
            subcategory: Sous-cat√©gorie du pattern
            pattern: Pattern regex
        """
        if category not in self.patterns:
            self.patterns[category] = {}
        if subcategory not in self.patterns[category]:
            self.patterns[category][subcategory] = []
        
        self.patterns[category][subcategory].append(pattern)
        logger.info(f"Pattern ajout√©: {category}.{subcategory}")
    
    def remove_pattern(self, category: str, subcategory: str, pattern: str):
        """
        Supprime un pattern
        
        Args:
            category: Cat√©gorie du pattern
            subcategory: Sous-cat√©gorie du pattern
            pattern: Pattern regex √† supprimer
        """
        if (category in self.patterns and 
            subcategory in self.patterns[category] and 
            pattern in self.patterns[category][subcategory]):
            self.patterns[category][subcategory].remove(pattern)
            logger.info(f"Pattern supprim√©: {category}.{subcategory}")
    
    def load_from_file(self, config_file: str):
        """
        Charge les patterns depuis un fichier JSON
        
        Args:
            config_file: Chemin vers le fichier de configuration
        """
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            if 'patterns' in config:
                self.patterns.update(config['patterns'])
                logger.info(f"Patterns charg√©s depuis {config_file}")
        except Exception as e:
            logger.error(f"Erreur chargement patterns depuis {config_file}: {e}")
    
    def save_to_file(self, config_file: str):
        """
        Sauvegarde les patterns dans un fichier JSON
        
        Args:
            config_file: Chemin vers le fichier de configuration
        """
        try:
            config = {
                'patterns': self.patterns,
                'metadata': {
                    'version': '2.0.0',
                    'created_at': '2024-01-01',
                    'description': 'Configuration des patterns d\'extraction'
                }
            }
            
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            logger.info(f"Patterns sauvegard√©s dans {config_file}")
        except Exception as e:
            logger.error(f"Erreur sauvegarde patterns dans {config_file}: {e}")
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques de performance"""
        return self.performance_stats.copy()
    
    def reset_stats(self):
        """Remet √† z√©ro les statistiques"""
        self.performance_stats = {
            'total_compilations': 0,
            'cache_hits': 0,
            'compilation_errors': 0
        }
