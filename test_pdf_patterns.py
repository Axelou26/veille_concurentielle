#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç Test des Patterns PDF
=======================

Test des patterns pour le PDF de r√®glement de consultation
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import PyPDF2
import re

def test_pdf_patterns():
    """Test des patterns pour le PDF"""
    
    print("üîç **Test des Patterns PDF**\n")
    
    # Chemin vers le PDF
    pdf_path = "rapports/2024-R001-000-000_RC.pdf"
    
    # Extraire le texte
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
    
    print(f"üìÑ **Texte extrait**: {len(text)} caract√®res")
    print(f"üìÑ **Aper√ßu du texte**: {text[:500]}...")
    
    # Analyser le contenu pour identifier les patterns
    print(f"\nüîç **Analyse du contenu:**")
    
    # Chercher des patterns sp√©cifiques
    patterns_to_test = {
        'R√©f√©rence': [
            r'N¬∞(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})',
            r'(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})',
            r'N¬∞\s*(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})',
            r'R√©f√©rence[:\s]*(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})',
            r'Code[:\s]*(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})'
        ],
        'Titre': [
            r'REALISATION DE PRESTATIONS DE FORMATION',
            r'PRESTATIONS DE FORMATION',
            r'FORMATION PROFESSIONNELLE',
            r'PRESTATIONS ASSOCIEES'
        ],
        'Type de proc√©dure': [
            r'PROCEDURE ADAPTEE',
            r'ACCORD -CADRE',
            r'ACCORD-CADRE',
            r'FOURNITURES COURANTES ET SERVICES'
        ],
        'Dates': [
            r'(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})',
            r'(janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+(\d{4})',
            r'(\d{1,2}\s+(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+\d{4})'
        ],
        'Montants': [
            r'(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?|HT|TTC)',
            r'(\d+(?:[.,]\d+)?)\s*(?:k‚Ç¨|keuros?|k\s*‚Ç¨)',
            r'(\d+(?:[.,]\d+)?)\s*(?:m‚Ç¨|meuros?|millions?|m\s*‚Ç¨)'
        ],
        'Groupement': [
            r'Centrale d\'Achat',
            r'Interm√©diaire',
            r'RESAH',
            r'UNIHA',
            r'CAIH',
            r'UGAP'
        ]
    }
    
    for category, patterns in patterns_to_test.items():
        print(f"\nüìã **{category}:**")
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE | re.MULTILINE)
            if matches:
                print(f"  ‚úÖ Pattern '{pattern}': {matches[:3]}")  # Afficher les 3 premiers matches
            else:
                print(f"  ‚ùå Pattern '{pattern}': Aucun match")
    
    # Chercher des sections sp√©cifiques
    print(f"\nüîç **Sections identifi√©es:**")
    
    section_patterns = {
        'Titre principal': r'REALISATION DE PRESTATIONS DE FORMATION',
        'Sous-titre': r'PROFESSIONNELLE ET PRESTATIONS ASSOCIEES',
        'Type de proc√©dure': r'PROCEDURE ADAPTEE',
        'Accord-cadre': r'ACCORD -CADRE DE FOURNITURES COURANTES ET SERVICES',
        'Code de la commande publique': r'Code de la commande publique',
        'Centrale d\'achat': r'Centrale d\'Achat',
        'Interm√©diaire': r'Interm√©diaire'
    }
    
    for section, pattern in section_patterns.items():
        if re.search(pattern, text, re.IGNORECASE):
            print(f"  ‚úÖ {section}: Trouv√©")
        else:
            print(f"  ‚ùå {section}: Non trouv√©")
    
    # Extraire des informations sp√©cifiques
    print(f"\nüîç **Informations extraites:**")
    
    # R√©f√©rence
    ref_match = re.search(r'N¬∞(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})', text)
    if ref_match:
        print(f"  ‚úÖ R√©f√©rence: {ref_match.group(1)}")
    else:
        print(f"  ‚ùå R√©f√©rence: Non trouv√©e")
    
    # Titre
    title_match = re.search(r'REALISATION DE PRESTATIONS DE FORMATION[^\n]*', text)
    if title_match:
        print(f"  ‚úÖ Titre: {title_match.group(0).strip()}")
    else:
        print(f"  ‚ùå Titre: Non trouv√©")
    
    # Type de proc√©dure
    type_match = re.search(r'PROCEDURE ADAPTEE', text)
    if type_match:
        print(f"  ‚úÖ Type de proc√©dure: Proc√©dure adapt√©e")
    else:
        print(f"  ‚ùå Type de proc√©dure: Non trouv√©")
    
    # Accord-cadre
    accord_match = re.search(r'ACCORD -CADRE DE FOURNITURES COURANTES ET SERVICES', text)
    if accord_match:
        print(f"  ‚úÖ Accord-cadre: Oui")
    else:
        print(f"  ‚ùå Accord-cadre: Non trouv√©")
    
    print(f"\nüéâ **Test termin√© !**")

if __name__ == "__main__":
    test_pdf_patterns()




