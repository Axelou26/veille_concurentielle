"""
üß™ Script de Test - Extraction du Document RC
===============================================

Teste l'extraction du document 2024-R001-000-000_RC.pdf
et v√©rifie que toutes les am√©liorations fonctionnent.
"""

import sys
import logging
from pathlib import Path
from io import BytesIO

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# Import de l'extracteur
try:
    from ao_extractor_v2 import AOExtractorV2
except ImportError:
    logger.error("‚ùå Impossible d'importer AOExtractorV2")
    sys.exit(1)

def test_extraction(pdf_path: str):
    """
    Teste l'extraction du document RC
    """
    logger.info("=" * 80)
    logger.info("üß™ TEST D'EXTRACTION - DOCUMENT RC")
    logger.info("=" * 80)
    
    # V√©rifier que le fichier existe
    pdf_file = Path(pdf_path)
    if not pdf_file.exists():
        logger.error(f"‚ùå Fichier non trouv√©: {pdf_path}")
        return None
    
    logger.info(f"üìÑ Fichier: {pdf_file.name}")
    logger.info(f"üìÅ Chemin: {pdf_file.absolute()}")
    
    # Initialiser l'extracteur (sans BDD pour ce test)
    logger.info("\nüöÄ Initialisation de l'extracteur...")
    extractor = AOExtractorV2()
    
    # Simuler un fichier upload√©
    logger.info("\nüìñ Lecture du fichier PDF...")
    with open(pdf_file, 'rb') as f:
        file_content = BytesIO(f.read())
    
    # Cr√©er un objet fichier simul√©
    class MockFile:
        def __init__(self, name, content):
            self.name = name
            self.read = lambda: content.getvalue()
            self.seek = content.seek
            self.tell = content.tell
    
    mock_file = MockFile(pdf_file.name, file_content)
    file_analysis = {'type': 'pdf'}
    
    # Extraire les donn√©es
    logger.info("\nüîç Extraction en cours...")
    logger.info("-" * 80)
    
    try:
        extracted_entries = extractor.extract_from_file(
            mock_file, 
            file_analysis=file_analysis
        )
        
        if not extracted_entries:
            logger.error("‚ùå Aucune donn√©e extraite")
            return None
        
        logger.info(f"‚úÖ Extraction r√©ussie: {len(extracted_entries)} entr√©e(s)")
        logger.info("-" * 80)
        
        # Afficher les r√©sultats
        for idx, entry in enumerate(extracted_entries, 1):
            logger.info(f"\nüìä ENTR√âE {idx}/{len(extracted_entries)}")
            logger.info("=" * 80)
            
            # V√©rifier les champs cl√©s
            valeurs_extraites = entry.get('valeurs_extraites', {})
            
            # 1. INTITUL√â DE LA PROC√âDURE (Titre multi-lignes)
            logger.info("\nüéØ TEST 1: Intitul√© de la proc√©dure (Titre multi-lignes)")
            logger.info("-" * 80)
            intitule = valeurs_extraites.get('intitule_procedure', 'NON TROUV√â')
            if intitule and intitule != 'NON TROUV√â':
                logger.info(f"‚úÖ INTITUL√â TROUV√â:")
                logger.info(f"   Longueur: {len(intitule)} caract√®res")
                logger.info(f"   Contenu: {intitule[:100]}...")
                if len(intitule) > 100:
                    logger.info(f"   (titre complet: {len(intitule)} caract√®res)")
                
                # V√©rifier si c'est un titre multi-lignes (long)
                if len(intitule) > 150:
                    logger.info("   ‚úÖ TITRE MULTI-LIGNES D√âTECT√â (phrase longue)")
                if "FOURNITURE" in intitule or "INSTALLATION" in intitule:
                    logger.info("   ‚úÖ MOTS-CL√âS ATTENDUS PR√âSENTS")
            else:
                logger.error(f"‚ùå Intitul√© NON TROUV√â")
            
            # 2. UNIVERS (G√©n√©ration automatique)
            logger.info("\nüéØ TEST 2: Univers (G√©n√©ration automatique)")
            logger.info("-" * 80)
            univers = valeurs_extraites.get('univers', 'NON TROUV√â')
            if univers and univers != 'NON TROUV√â':
                logger.info(f"‚úÖ UNIVERS G√âN√âR√â: {univers}")
            else:
                logger.error(f"‚ùå Univers NON G√âN√âR√â")
            
            # 3. SEGMENT (G√©n√©ration intelligente)
            logger.info("\nüéØ TEST 3: Segment (G√©n√©ration intelligente)")
            logger.info("-" * 80)
            segment = valeurs_extraites.get('segment', 'NON TROUV√â')
            if segment and segment != 'NON TROUV√â':
                logger.info(f"‚úÖ SEGMENT G√âN√âR√â: {segment}")
                if univers and univers != 'NON TROUV√â':
                    logger.info(f"   Coh√©rence avec univers '{univers}': ‚úÖ")
            else:
                logger.warning(f"‚ö†Ô∏è Segment NON G√âN√âR√â (devrait √™tre g√©n√©r√© depuis l'univers)")
            
            # 4. FAMILLE (G√©n√©ration intelligente)
            logger.info("\nüéØ TEST 4: Famille (G√©n√©ration intelligente)")
            logger.info("-" * 80)
            famille = valeurs_extraites.get('famille', 'NON TROUV√â')
            if famille and famille != 'NON TROUV√â':
                logger.info(f"‚úÖ FAMILLE G√âN√âR√âE: {famille}")
                if univers and univers != 'NON TROUV√â':
                    logger.info(f"   Coh√©rence avec univers '{univers}': ‚úÖ")
            else:
                logger.warning(f"‚ö†Ô∏è Famille NON G√âN√âR√âE (devrait √™tre g√©n√©r√©e depuis l'univers + intitul√©)")
            
            # 5. Autres champs importants
            logger.info("\nüéØ TEST 5: Autres champs extraits")
            logger.info("-" * 80)
            
            champs_importants = [
                'reference_procedure',
                'groupement',
                'type_procedure',
                'mono_multi',
                'date_limite',
                'montant_global_estime'
            ]
            
            for champ in champs_importants:
                valeur = valeurs_extraites.get(champ)
                if valeur:
                    logger.info(f"   ‚úÖ {champ}: {valeur}")
                else:
                    logger.debug(f"   ‚ö†Ô∏è {champ}: Non trouv√©")
            
            # 6. Compteur de champs remplis
            logger.info("\nüéØ TEST 6: Couverture globale")
            logger.info("-" * 80)
            champs_remplis = sum(1 for v in valeurs_extraites.values() if v and v != '' and v != 'NON TROUV√â')
            total_champs = len(valeurs_extraites)
            logger.info(f"   Champs remplis: {champs_remplis}/{total_champs}")
            logger.info(f"   Taux de remplissage: {champs_remplis/total_champs*100:.1f}%")
            
            # R√©sum√© final
            logger.info("\n" + "=" * 80)
            logger.info("üìã R√âSUM√â DES TESTS")
            logger.info("=" * 80)
            
            tests_reussis = []
            tests_echoues = []
            
            if intitule and intitule != 'NON TROUV√â':
                tests_reussis.append("‚úÖ Intitul√© extrait (titre multi-lignes)")
            else:
                tests_echoues.append("‚ùå Intitul√© NON extrait")
            
            if univers and univers != 'NON TROUV√â':
                tests_reussis.append("‚úÖ Univers g√©n√©r√©")
            else:
                tests_echoues.append("‚ùå Univers NON g√©n√©r√©")
            
            if segment and segment != 'NON TROUV√â':
                tests_reussis.append("‚úÖ Segment g√©n√©r√© intelligemment")
            else:
                tests_echoues.append("‚ö†Ô∏è Segment NON g√©n√©r√©")
            
            if famille and famille != 'NON TROUV√â':
                tests_reussis.append("‚úÖ Famille g√©n√©r√©e intelligemment")
            else:
                tests_echoues.append("‚ö†Ô∏è Famille NON g√©n√©r√©e")
            
            logger.info(f"\n‚úÖ Tests r√©ussis ({len(tests_reussis)}):")
            for test in tests_reussis:
                logger.info(f"   {test}")
            
            if tests_echoues:
                logger.info(f"\n‚ö†Ô∏è Tests avec probl√®mes ({len(tests_echoues)}):")
                for test in tests_echoues:
                    logger.info(f"   {test}")
            
            # Afficher toutes les valeurs extraites (debug)
            logger.info("\n" + "=" * 80)
            logger.info("üìã TOUTES LES VALEURS EXTRAITES")
            logger.info("=" * 80)
            for key, value in sorted(valeurs_extraites.items()):
                if value:
                    logger.info(f"   {key}: {value}")
            
            return entry
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'extraction: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None


if __name__ == "__main__":
    # Chemin du fichier PDF
    pdf_path = "rapports/2024-R001-000-000_RC.pdf"
    
    logger.info("\n" + "=" * 80)
    logger.info("üß™ LANCEMENT DU TEST")
    logger.info("=" * 80)
    
    result = test_extraction(pdf_path)
    
    logger.info("\n" + "=" * 80)
    if result:
        logger.info("‚úÖ TEST TERMIN√â - V√©rifiez les r√©sultats ci-dessus")
    else:
        logger.info("‚ùå TEST √âCHOU√â - Consultez les erreurs ci-dessus")
    logger.info("=" * 80)

