#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç Test PDF Sp√©cialis√©
=====================

Test avec des patterns sp√©cialis√©s pour les r√®glements de consultation
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import PyPDF2
import re
from extraction_improver import extraction_improver

def test_pdf_specialized():
    """Test avec des patterns sp√©cialis√©s"""
    
    print("üîç **Test PDF Sp√©cialis√©**\n")
    
    # Chemin vers le PDF
    pdf_path = "rapports/2024-R001-000-000_RC.pdf"
    
    # Extraire le texte
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
    
    print(f"üìÑ **Texte extrait**: {len(text)} caract√®res")
    
    # Cr√©er un contexte sp√©cialis√© pour les r√®glements de consultation
    context = {
        'document_type': 'reglement_consultation',
        'has_reference': True,
        'has_title': True,
        'has_dates': True,
        'has_amounts': False,  # Ce document ne contient pas de montants
        'is_accord_cadre': True
    }
    
    # Test avec l'extracteur am√©lior√© et contexte sp√©cialis√©
    print(f"\nüîß **Test avec contexte sp√©cialis√©:**")
    try:
        extracted_data = extraction_improver.extract_improved_data(text)
        
        print(f"‚úÖ **Extraction r√©ussie**")
        print(f"üìä **Champs extraits**: {len(extracted_data)}")
        
        # Afficher les r√©sultats importants
        important_fields = [
            'reference_procedure', 'intitule_procedure', 'intitule_lot',
            'type_procedure', 'groupement', 'univers', 'segment',
            'date_limite', 'date_attribution', 'duree_marche',
            'montant_global_estime', 'montant_global_maxi'
        ]
        
        print(f"\nüìã **Champs importants:**")
        for field in important_fields:
            if field in extracted_data:
                value = extracted_data[field]
                if isinstance(value, str) and len(value) > 50:
                    value = value[:50] + "..."
                print(f"  ‚úÖ {field}: {value}")
            else:
                print(f"  ‚ùå {field}: Non trouv√©")
        
        # Test manuel des patterns sp√©cifiques
        print(f"\nüîç **Test manuel des patterns sp√©cifiques:**")
        
        # R√©f√©rence
        ref_patterns = [
            r'N¬∞(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})',
            r'(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})',
            r'R√©f√©rence[:\s]*(\d{4}-[A-Z]\d{3}-\d{3}-\d{3})'
        ]
        
        for pattern in ref_patterns:
            match = re.search(pattern, text)
            if match:
                print(f"  ‚úÖ R√©f√©rence trouv√©e avec pattern '{pattern}': {match.group(1)}")
                break
        else:
            print(f"  ‚ùå Aucune r√©f√©rence trouv√©e")
        
        # Titre
        title_patterns = [
            r'REALISATION DE PRESTATIONS DE FORMATION[^\n]*',
            r'PRESTATIONS DE FORMATION[^\n]*',
            r'FORMATION PROFESSIONNELLE[^\n]*'
        ]
        
        for pattern in title_patterns:
            match = re.search(pattern, text)
            if match:
                print(f"  ‚úÖ Titre trouv√© avec pattern '{pattern}': {match.group(0).strip()}")
                break
        else:
            print(f"  ‚ùå Aucun titre trouv√©")
        
        # Type de proc√©dure
        if 'PROCEDURE ADAPTEE' in text:
            print(f"  ‚úÖ Type de proc√©dure: Proc√©dure adapt√©e")
        else:
            print(f"  ‚ùå Type de proc√©dure: Non trouv√©")
        
        # Groupement
        if 'RESAH' in text:
            print(f"  ‚úÖ Groupement: RESAH")
        else:
            print(f"  ‚ùå Groupement: Non trouv√©")
        
        # Dates
        date_patterns = [
            r'(\d{1,2}\s+(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)\s+\d{4})',
            r'(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})'
        ]
        
        dates_found = []
        for pattern in date_patterns:
            matches = re.findall(pattern, text)
            dates_found.extend(matches)
        
        if dates_found:
            print(f"  ‚úÖ Dates trouv√©es: {dates_found[:3]}")
        else:
            print(f"  ‚ùå Aucune date trouv√©e")
        
        # Montants
        montant_patterns = [
            r'(\d{1,3}(?:[.,\s]\d{3})*(?:[.,]\d{2})?)\s*(?:‚Ç¨|euros?|HT|TTC)',
            r'(\d+(?:[.,]\d+)?)\s*(?:k‚Ç¨|keuros?|k\s*‚Ç¨)',
            r'(\d+(?:[.,]\d+)?)\s*(?:m‚Ç¨|meuros?|millions?|m\s*‚Ç¨)'
        ]
        
        montants_found = []
        for pattern in montant_patterns:
            matches = re.findall(pattern, text)
            montants_found.extend(matches)
        
        if montants_found:
            print(f"  ‚úÖ Montants trouv√©s: {montants_found[:3]}")
        else:
            print(f"  ‚ùå Aucun montant trouv√© (normal pour un r√®glement de consultation)")
        
        # Statistiques
        total_fields = len(important_fields)
        extracted_count = sum(1 for field in important_fields if field in extracted_data)
        percentage = (extracted_count / total_fields) * 100
        
        print(f"\nüìà **Statistiques des champs importants:**")
        print(f"- Champs extraits: {extracted_count}/{total_fields} ({percentage:.1f}%)")
        print(f"- Champs manquants: {total_fields - extracted_count}")
        
    except Exception as e:
        print(f"‚ùå **Erreur lors de l'extraction**: {e}")
        import traceback
        traceback.print_exc()
    
    print(f"\nüéâ **Test termin√© !**")

if __name__ == "__main__":
    test_pdf_specialized()




